import argparse
import subprocess
import multiprocessing
import os

import torch

# We convert the dataset in BHive to the raw data format used by Ithemal.
# Data format in BHive: hex, timing
# Data format in ithemal: (code_id, timing, code_intel, code_xml)
# The code_intel need to be generated by run: `_TOKENIZER hex --intel`
# The code_xml need to be generated by run: `_TOKENIZER hex --token `
_TOKENIZER = os.path.join(os.environ['ITHEMAL_HOME'], 'data_collection', 'build', 'bin', 'tokenizer')

def process_csv_record(line):
    timing = 0.0
    line = line.strip()
    com = line.split(',')
    assert len(com) == 2
    hex_str, timing = com
    code_intel = subprocess.check_output([_TOKENIZER, hex_str, '--intel']).strip()
    code_xml = subprocess.check_output([_TOKENIZER, hex_str, '--token']).strip()
    timing = float(timing)
    return (timing, code_intel, code_xml)


def convert_csv_to_raw_data(csv_file, raw_data_file):
    raw_data = []
    results = []
    filtered_lines = []
    with open(csv_file, 'r') as f:
        lines = f.readlines()
        for line in lines:
            if line.strip() == '':
                continue
            if len(line.strip().split(','))!=2:
                continue
            filtered_lines.append(line)
    # Number of parallel processes
    num_processes = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(processes=num_processes)
    results = pool.map(process_csv_record, lines)
    for idx, (timing, code_intel, code_xml) in enumerate(results):
        raw_data.append((idx, timing, code_intel, code_xml))
    
    torch.save(raw_data, raw_data_file)

def main():
    parser = argparse.ArgumentParser('Convert csv file to raw data file')
    parser.add_argument('csv_file', help='csv file to convert')
    parser.add_argument('raw_data_file', help='raw data file to save')
    args = parser.parse_args()

    convert_csv_to_raw_data(args.csv_file, args.raw_data_file)

if __name__ == '__main__':
    main()
